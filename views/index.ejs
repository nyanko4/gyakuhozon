<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>設定</title>
  <style>
  body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        margin: 20px;
        background-color: #f4f4f4;
        color: #333;
    }

    h1, h2 {
        color: #337ab7;
        text-align: center;
        margin-bottom: 20px;
    }

    select {
        padding: 10px;
        margin-bottom: 20px;
        border: 1px solid #ccc;
        border-radius: 4px;
        width: 200px;
        display: block;
        margin-left: auto;
        margin-right: auto;
    }

    table {
        border-collapse: collapse;
        width: 90%;
        margin: 20px auto;
        background-color: #fff;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    th, td {
        border: 1px solid #ddd;
        padding: 10px;
        text-align: left;
    }

    th {
        background-color: #f2f2f2;
        font-weight: bold;
        color: #555;
    }

    tbody tr:nth-child(even) {
        background-color: #f9f9f9;
    }

    button {
        background-color: #5cb85c;
        color: white;
        border: none;
        padding: 8px 12px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 14px;
        border-radius: 4px;
        cursor: pointer;
        margin-right: 5px;
    }

    button:hover {
        opacity: 0.8;
    }

    h2 {
        margin-top: 30px;
    }

    form {
        background-color: #fff;
        padding: 20px;
        margin: 20px auto;
        width: 80%;
        border-radius: 8px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    form div {
        margin-bottom: 15px;
    }

    form label {
        display: block;
        margin-bottom: 5px;
        font-weight: bold;
        color: #555;
    }

    form input[type="text"],
    form input[type="number"] {
        width: calc(100% - 12px);
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    form button[type="submit"] {
        background-color: #007bff;
        color: white;
        border: none;
        padding: 10px 15px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        border-radius: 4px;
        cursor: pointer;
    }

    form button[type="submit"]:hover {
        opacity: 0.9;
    }

    #editForm {
        display: none; /* 初期状態では非表示 */
    }
    #editFormTitle {
        display: none; /* 初期状態では非表示 */
    }
  </style>
</head>
<body>
  <h1>データ一覧</h1>

  <select id="tableSelector" onchange="changeTable(this.value)">
    <option value="おみくじ" <%= selectedTable === 'おみくじ' ? 'selected' : '' %>>おみくじ</option>
    <option value="ブラックリスト" <%= selectedTable === 'ブラックリスト' ? 'selected' : '' %>>ブラックリスト</option>
  </select>

  <table>
    <thead>
      <tr>
        <th>accountId</th>
        <th><%= nameColumn === '理由' ? '理由' : '名前' %></th>
        <th><%= resultColumn === '回数' ? '回数' : '結果' %></th>
        <th>操作</th>
      </tr>
    </thead>
    <tbody id="dataTableBody">
      <% items.forEach(item => { %>
        <tr>
          <td><%= item.accountId %></td>
          <td><%= item[nameColumn] %></td>
          <td><%= item[resultColumn] %></td>
          <td>
            <button onclick="showEditForm('<%= item.accountId %>', '<%= item[nameColumn === '理由' ? '理由' : '名前'] %>', '<%= item[resultColumn === '回数' ? '回数' : '結果' ] %>')">編集</button>
            <button onclick="deleteItem('<%= item.accountId %>', '<%= item.名前 %>')">削除</button>
          </td>
        </tr>
          </td>
        </tr>
      <% }); %>
    </tbody>
  </table>

  <h2>新規追加</h2>
  <form id="addItemForm">
    <input type="hidden" name="table" value="<%= selectedTable %>">
    <div>
      <label for="accountId">accountId:</label>
      <input type="text" id="accountId" name="accountId" required>
    </div>
    <div>
      <label for="name"><%= nameColumn === '理由' ? '理由' : '名前' %>:</label>
      <input type="text" id="name" name="name" required>
    </div>
    <div>
      <label for="result"><%= resultColumn === '回数' ? '回数' : '結果' %>:</label>
      <input type="text" id="result" name="result">
    </div>
    <button type="submit">追加</button>
  </form>

  <h2 id="editFormTitle">編集</h2>
  <form id="editForm">
    <input type="hidden" name="table" value="<%= selectedTable %>">
    <div>
      <label for="editAccountId">accountId:</label>
      <input type="text" id="editAccountId" name="accountId" readonly>
    </div>
    <div>
      <label for="editName"><%= nameColumn === '理由' ? '理由' : '名前' %>:</label>
      <input type="text" id="editName" name="name" required>
    </div>
    <div>
      <label for="editResult"><%= resultColumn === '回数' ? '回数' : '結果' %>:</label>
      <input type="text" id="editResult" name="result">
    </div>
    <button type="submit">更新</button>
    <button type="button" onclick="hideEditForm()">キャンセル</button>
  </form>

  <script>
    const editForm = document.getElementById('editForm');
    const editFormTitle = document.getElementById('editFormTitle');
    const editAccountIdInput = document.getElementById('editAccountId');
    const editNameInput = document.getElementById('editName');
    const editResultInput = document.getElementById('editResult');
    const addItemForm = document.getElementById('addItemForm');
    const editFormElement = document.getElementById('editForm');

    function changeTable(tableName) {
      window.location.href = `/?table=${tableName}`;
    }

    function showEditForm(id, name, result) {
      editFormTitle.innerText = `${name}さんのデータを編集`;
      editAccountIdInput.value = id;
      editNameInput.value = name;
      editResultInput.value = result;
      editFormTitle.style.display = 'block';
      editForm.style.display = 'block';
    }

    function hideEditForm() {
      editFormTitle.style.display = 'none';
      editForm.style.display = 'none';
    }

    async function deleteItem(id, name) {
      const selectedTable = document.getElementById('tableSelector').value;
      if (confirm(`${name}さんのものを本当に削除しますか？`)) {
        try {
          const response = await fetch(`/api/items/${id}?table=${selectedTable}`, {
            method: 'DELETE'
          });
          if (response.ok) {
            window.location.reload();
          } else {
            const error = await response.json();
            alert(`削除に失敗しました: ${error.message || '不明なエラー'}`);
          }
        } catch (error) {
          console.error('削除エラー:', error);
          alert('削除中にエラーが発生しました');
        }
      }
    }

    addItemForm.addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData.entries());
      data.table = document.getElementById('tableSelector').value;

      try {
        const response = await fetch('/api/items', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.json();
          alert(`追加に失敗しました: ${error.message || '不明なエラー'}`);
        }
      } catch (error) {
        console.error('追加エラー:', error);
        alert('追加中にエラーが発生しました');
      }
    });

    editFormElement.addEventListener('submit', async (event) => {
      event.preventDefault();
      const formData = new FormData(event.target);
      const data = Object.fromEntries(formData.entries());
      const id = data.accountId;
      const selectedTable = document.getElementById('tableSelector').value;
      data.table = selectedTable;
      delete data.accountId;

      try {
        const response = await fetch(`/api/items/${id}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          window.location.reload();
        } else {
          const error = await response.json();
          alert(`更新に失敗しました: ${error.message || '不明なエラー'}`);
        }
      } catch (error) {
        console.error('更新エラー:', error);
        alert('更新中にエラーが発生しました');
      }
    });
  </script>
</body>
</html>
